#!/usr/bin/env python
# -*- coding: utf-8 -*-

from argparse import ArgumentParser
import asyncio
import logging
import signal
import os

from aiohttp.web import Application, run_app

from lona.server import LonaServer
from lona.logging import LogFormatter, LogFilter

# parse command line
parser = ArgumentParser()

parser.add_argument('--host', type=str, default='localhost')
parser.add_argument('--port', type=int, default=8080)
parser.add_argument('--shutdown-timeout', type=float, default=0.0)
parser.add_argument('-s', '--settings', nargs='+')
parser.add_argument('--project-root', type=str, default=os.getcwd())
parser.add_argument('--shell', action='store_true')
parser.add_argument('--loggers', type=str, nargs='+')

parser.add_argument(
    '-l', '--log-level',
    choices=['debug', 'info', 'warn', 'error', 'critical'],
    default='warn',
)

cli_args = parser.parse_args()

# change working directory to project root
os.chdir(cli_args.project_root)

# setup logging
logging.basicConfig(level={
    'debug': logging.DEBUG,
    'info': logging.INFO,
    'warn': logging.WARN,
    'error': logging.ERROR,
    'critical': logging.CRITICAL,
}[cli_args.log_level.lower()])

log_formatter = LogFormatter()
log_filter = LogFilter()

for handler in logging.getLogger().root.handlers:
    handler.setFormatter(log_formatter)
    handler.addFilter(log_filter)

if cli_args.loggers:
    for logger_name in cli_args.loggers:
        if logger_name.startswith('_'):
            log_filter.exclude(logger_name[1:])

        else:
            if logger_name.startswith('+'):
                logger_name = logger_name[1:]

            log_filter.include(logger_name)

# setup lona server
loop = asyncio.get_event_loop()
app = Application()

server = LonaServer(
    app=app,
    loop=loop,
    project_root=cli_args.project_root,
    settings_paths=list(cli_args.settings or []),
)


async def shutdown(app):
    await server.stop()

app.on_shutdown.append(shutdown)

loop.run_in_executor(None, lambda: server.hooks.run('server_start'))

# run server
if cli_args.shell:
    async def start_shell(server):
        def _start_shell():
            import IPython
            IPython.embed()

            os.kill(os.getpid(), signal.SIGTERM)

        loop.run_in_executor(None, _start_shell)

    loop.create_task(start_shell(server))

run_app(
    app=app,
    host=cli_args.host,
    port=cli_args.port,
    shutdown_timeout=cli_args.shutdown_timeout,
)
